{"ast":null,"code":"import { currentObjects, setCurrentObjects } from \"../UIElements/CanvasDraw\";\nimport { version } from \"../MainProgram\";\nimport { Vertex } from \"../DataStructures/Vertex\";\nimport { Arrow } from \"../DataStructures/Arrow\";\nexport function save() {\n  var objectsToSave = currentObjects; // Process objects to save\n\n  objectsToSave.forEach(item => {\n    if (item !== undefined) {\n      switch (item.name) {\n        case \"Arrow\":\n          // Prevent cyclic loop\n          item.fromVertex = null;\n          item.toVertex = null;\n          break;\n\n        default:\n          // Do nothing\n          break;\n      }\n    }\n  }); // Combine into save data\n\n  var saveData = {\n    // The version is being saved in the savefile\n    // this is so in future versions, if the serialisation changes\n    // They can upgrade the the file to one compatibile with the newer version\n    version: version,\n    // The data here should all have uuids and should be convertible back into their objects.\n    currentObjects: objectsToSave\n  };\n  var dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(saveData));\n  var downloadElem = document.getElementById('json-downloader');\n  downloadElem.setAttribute(\"href\", dataStr);\n  downloadElem.setAttribute(\"download\", \"export.json\");\n}\nexport function open(jsonString) {\n  if (jsonString == null) return;\n\n  try {\n    // TODO Add check to see if there is unsaved progress\n    var loadedJSON = JSON.parse(jsonString); // Loaded objects ONLY with variables\n\n    var loadedObjects = loadedJSON.currentObjects; // Loaded objects with variables and functions\n\n    var newObjects = []; // Copy behaviour over (vertexs first)\n\n    loadedObjects.forEach(item => {\n      if (item !== undefined) {\n        switch (item.name) {\n          case \"Vertex\":\n            var newVertex = new Vertex(item.UUID, item.title, item.content, item.sx, item.sy, item.width, item.height);\n            newObjects.push(newVertex);\n            break;\n\n          default:\n            break;\n        }\n      }\n    }); // Copy behaviour over (everything else)\n\n    loadedObjects.forEach(item => {\n      if (item !== undefined) {\n        switch (item.name) {\n          case \"Vertex\":\n            break;\n\n          case \"Arrow\":\n            var newArrow = new Arrow(item.UUID, newObjects, item.fromVertexUUID, item.fromVertexNode, item.toVertexUUID, item.toVertexNode);\n            newObjects.push(newArrow);\n            break;\n\n          default:\n            console.error(\"Unknown object to deserialise \", item);\n            break;\n        }\n      }\n    });\n    console.log(\"Deserialised with value of \", newObjects);\n    setCurrentObjects(newObjects);\n  } catch (e) {\n    alert(e);\n  }\n}","map":{"version":3,"sources":["/ocean/pacific/University/2020/IFB398/overdrive/src/Serialisation/FileManager.js"],"names":["currentObjects","setCurrentObjects","version","Vertex","Arrow","save","objectsToSave","forEach","item","undefined","name","fromVertex","toVertex","saveData","dataStr","encodeURIComponent","JSON","stringify","downloadElem","document","getElementById","setAttribute","open","jsonString","loadedJSON","parse","loadedObjects","newObjects","newVertex","UUID","title","content","sx","sy","width","height","push","newArrow","fromVertexUUID","fromVertexNode","toVertexUUID","toVertexNode","console","error","log","e","alert"],"mappings":"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","sourcesContent":["import {currentObjects, setCurrentObjects} from \"../UIElements/CanvasDraw\"\nimport {version} from \"../MainProgram\"\n\nimport {Vertex} from \"../DataStructures/Vertex\";\nimport {Arrow} from \"../DataStructures/Arrow\";\n\nexport function save() {\n\n    var objectsToSave = currentObjects;\n    // Process objects to save\n    objectsToSave.forEach((item) => {\n        if (item !== undefined) {\n            switch (item.name) {\n                case \"Arrow\":\n                    // Prevent cyclic loop\n                    item.fromVertex = null;\n                    item.toVertex = null;\n                    break;\n                default:\n                    // Do nothing\n                    break;\n            }\n        }\n    });\n\n    // Combine into save data\n    var saveData = {\n        // The version is being saved in the savefile\n        // this is so in future versions, if the serialisation changes\n        // They can upgrade the the file to one compatibile with the newer version\n        version: version,\n\n        // The data here should all have uuids and should be convertible back into their objects.\n        currentObjects: objectsToSave,\n    }\n\n    var dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(saveData));\n    var downloadElem = document.getElementById('json-downloader');\n    downloadElem.setAttribute(\"href\",     dataStr     );\n    downloadElem.setAttribute(\"download\", \"export.json\");\n}\n\nexport function open(jsonString) {\n    if (jsonString == null) return;\n    try {\n        // TODO Add check to see if there is unsaved progress\n        var loadedJSON = JSON.parse(jsonString);\n\n        // Loaded objects ONLY with variables\n        var loadedObjects = loadedJSON.currentObjects;\n\n        // Loaded objects with variables and functions\n        var newObjects = [];\n\n        // Copy behaviour over (vertexs first)\n        loadedObjects.forEach((item) => {\n            if (item !== undefined) {\n                switch (item.name) {\n                    case \"Vertex\":\n                        var newVertex = new Vertex(item.UUID, item.title, item.content, item.sx, item.sy, item.width, item.height);\n                        newObjects.push(newVertex);\n                        break;\n                    default:\n                        break;\n                }\n            }\n        });\n\n        // Copy behaviour over (everything else)\n        loadedObjects.forEach((item) => {\n            if (item !== undefined) {\n                switch (item.name) {\n                    case \"Vertex\":\n                        break;\n                    case \"Arrow\":\n                        var newArrow = new Arrow(item.UUID, newObjects, item.fromVertexUUID, item.fromVertexNode, item.toVertexUUID, item.toVertexNode);\n                        newObjects.push(newArrow);\n                        break;\n                    default:\n                        console.error(\"Unknown object to deserialise \", item);\n                        break;\n                }\n            }\n        });\n        \n        console.log(\"Deserialised with value of \", newObjects);\n        setCurrentObjects(newObjects);\n    } catch (e) {\n        alert(e);\n    }\n\n}"]},"metadata":{},"sourceType":"module"}