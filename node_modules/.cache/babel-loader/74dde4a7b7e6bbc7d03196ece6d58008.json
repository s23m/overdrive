{"ast":null,"code":"/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\nimport { Cardinality } from \"./Cardinality\";\nimport { getDistance } from \"../UIElements/CanvasDraw\";\nconst EdgeEnd = {\n  NONE: 1,\n  ARROW: 2,\n  TRIANGLE: 3,\n  FILLED_TRIANGLE: 4,\n  DIAMOND: 5,\n  FILLED_DIAMOND: 6\n};\nconst LineColour = {\n  BLACK: 1,\n  RED: 2,\n  BLUE: 3,\n  GREEN: 4\n};\nconst LineType = {\n  SOLID: 1,\n  DASHED: 2\n};\nexport class Arrow {\n  constructor(UUID, objectsList, fromVertexUUID, fromVertexNode, toVertexUUID, toVertexNode) {\n    this.UUID = UUID; // Connections\n\n    this.fromVertexNode = fromVertexNode;\n    this.fromVertexUUID = fromVertexUUID;\n    this.fromVertex = this.getObjectFromUUID(objectsList, fromVertexUUID);\n    this.toVertexNode = toVertexNode;\n    this.toVertexUUID = toVertexUUID;\n    this.toVertex = this.getObjectFromUUID(objectsList, toVertexUUID); // Type\n\n    this.startType = EdgeEnd.NONE;\n    this.endType = EdgeEnd.ARROW;\n    this.lineColour = LineColour.BLACK;\n    this.LineType = LineType.SOLID;\n    this.cardinality = null;\n  } // Gets the object (hopefully a vertex) from UUID\n\n\n  getObjectFromUUID(objects, uuid) {\n    for (var i = 0; i < objects.length; i++) {\n      if (objects[i] !== null) {\n        if (objects[i].UUID === uuid) {\n          return objects[i];\n        }\n      }\n    }\n\n    console.error(\"Could not find vertex to connect for uuid\", uuid);\n    return null;\n  }\n\n  bindNodes() {\n    this.fromVertex.addChild(this.toVertex);\n  }\n\n  addCardinality(lowerBound, upperBound) {\n    this.cardinality = new Cardinality(lowerBound, upperBound);\n  }\n\n  setStartType(startType) {\n    switch (startType) {\n      case \"-No Icon\":\n        this.startType = EdgeEnd.NONE;\n        break;\n\n      case \"->\":\n        this.startType = EdgeEnd.ARROW;\n        break;\n\n      case \"-▷\":\n        this.startType = EdgeEnd.TRIANGLE;\n        break;\n\n      case \"-◆\":\n        this.startType = EdgeEnd.DIAMOND;\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  setEndType(endType) {\n    switch (endType) {\n      case \"-No Icon\":\n        this.endType = EdgeEnd.NONE;\n        break;\n\n      case \"->\":\n        this.endType = EdgeEnd.ARROW;\n        break;\n\n      case \"-▷\":\n        this.endType = EdgeEnd.TRIANGLE;\n        break;\n\n      case \"-◆\":\n        this.endType = EdgeEnd.DIAMOND;\n        break;\n\n      default:\n        break;\n    }\n\n    console.log(this.endType);\n  }\n\n  setLineColour(lineColour) {\n    switch (lineColour) {\n      case \"Black\":\n        this.lineColour = LineColour.BLACK;\n        break;\n\n      case \"Red\":\n        this.lineColour = LineColour.RED;\n        break;\n\n      case \"Blue\":\n        this.lineColour = LineColour.BLUE;\n        break;\n\n      case \"Green\":\n        this.lineColour = LineColour.GREEN;\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  setLineType(lineType) {\n    switch (lineType) {\n      case \"Solid\":\n        this.lineType = LineType.SOLID;\n        break;\n\n      case \"Dashed\":\n        this.lineType = LineType.DASHED;\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  draw(canvasContext) {\n    var fromNode = this.fromVertex.getNodeByVertexNode(this.fromVertexNode);\n    var toNode = this.toVertex.getNodeByVertexNode(this.toVertexNode);\n    canvasContext.beginPath();\n    canvasContext.moveTo(fromNode[0], fromNode[1]);\n    canvasContext.lineTo(toNode[0], toNode[1]);\n    canvasContext.stroke(); // Arrow types\n\n    if (this.endType === EdgeEnd.ARROW) {// TODO arrow types\n    }\n  } // Returns all nodes for this object\n\n\n  getNodes() {\n    return null;\n  } // Checks if it intersects with point\n\n\n  intersects(x, y) {\n    var fromNode = this.fromVertex.getNodeByVertexNode(this.fromVertexNode);\n    var toNode = this.toVertex.getNodeByVertexNode(this.toVertexNode);\n    var m = getDistance(x, y, fromNode[0], fromNode[1]);\n    var n = getDistance(x, y, toNode[0], toNode[1]);\n    var l = getDistance(fromNode[0], fromNode[1], toNode[0], toNode[1]);\n    var threshold = 5;\n    return m + n - threshold < l;\n  }\n\n}","map":{"version":3,"sources":["/ocean/pacific/University/2020/IFB398/overdrive/src/DataStructures/Arrow.js"],"names":["Cardinality","getDistance","EdgeEnd","NONE","ARROW","TRIANGLE","FILLED_TRIANGLE","DIAMOND","FILLED_DIAMOND","LineColour","BLACK","RED","BLUE","GREEN","LineType","SOLID","DASHED","Arrow","constructor","UUID","objectsList","fromVertexUUID","fromVertexNode","toVertexUUID","toVertexNode","fromVertex","getObjectFromUUID","toVertex","startType","endType","lineColour","cardinality","objects","uuid","i","length","console","error","bindNodes","addChild","addCardinality","lowerBound","upperBound","setStartType","setEndType","log","setLineColour","setLineType","lineType","draw","canvasContext","fromNode","getNodeByVertexNode","toNode","beginPath","moveTo","lineTo","stroke","getNodes","intersects","x","y","m","n","l","threshold"],"mappings":"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","sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\n\nimport { Cardinality } from \"./Cardinality\";\nimport { getDistance } from \"../UIElements/CanvasDraw\";\n\n\nconst EdgeEnd = {\n    NONE: 1,\n    ARROW: 2,\n    TRIANGLE: 3,\n    FILLED_TRIANGLE: 4,\n    DIAMOND: 5,\n    FILLED_DIAMOND: 6\n}\n\nconst LineColour = {\n    BLACK: 1,\n    RED: 2,\n    BLUE: 3,\n    GREEN: 4\n}\n\nconst LineType = {\n    SOLID: 1,\n    DASHED: 2\n}\n\nexport class Arrow {\n    constructor(UUID, objectsList, fromVertexUUID, fromVertexNode, toVertexUUID, toVertexNode) {\n        this.UUID = UUID;\n\n        // Connections\n        this.fromVertexNode = fromVertexNode;\n        this.fromVertexUUID = fromVertexUUID;\n        this.fromVertex = this.getObjectFromUUID(objectsList, fromVertexUUID);\n\n        this.toVertexNode = toVertexNode;\n        this.toVertexUUID = toVertexUUID;\n        this.toVertex = this.getObjectFromUUID(objectsList, toVertexUUID);\n\n        // Type\n        this.startType = EdgeEnd.NONE;\n        this.endType = EdgeEnd.ARROW;\n        this.lineColour = LineColour.BLACK;\n        this.LineType = LineType.SOLID;\n\n        this.cardinality = null;\n    }\n\n    // Gets the object (hopefully a vertex) from UUID\n    getObjectFromUUID(objects, uuid) {\n        for (var i=0; i < objects.length; i++) {\n            if (objects[i] !== null) {\n                if (objects[i].UUID === uuid) {\n                    return objects[i];\n                }\n            }\n        }\n\n        console.error(\"Could not find vertex to connect for uuid\", uuid);\n        return null;\n    }\n\n    bindNodes(){\n        this.fromVertex.addChild(this.toVertex);\n    }\n\n    addCardinality(lowerBound, upperBound) {\n        this.cardinality = new Cardinality(lowerBound, upperBound);\n    }\n\n    setStartType(startType) {\n        switch(startType) {\n            case \"-No Icon\":\n                this.startType = EdgeEnd.NONE;\n                break;\n            case \"->\":\n                this.startType = EdgeEnd.ARROW;\n                break;\n            case \"-▷\":\n                this.startType = EdgeEnd.TRIANGLE;\n                break;\n            case \"-◆\":\n                this.startType = EdgeEnd.DIAMOND;\n                break;\n            default:\n                break;\n        }\n    }\n\n    setEndType(endType) {\n        switch(endType) {\n            case \"-No Icon\":\n                this.endType = EdgeEnd.NONE;\n                break;\n            case \"->\":\n                this.endType = EdgeEnd.ARROW;\n                break;\n            case \"-▷\":\n                this.endType = EdgeEnd.TRIANGLE;\n                break;\n            case \"-◆\":\n                this.endType = EdgeEnd.DIAMOND;\n                break;\n            default:\n                break;\n        }\n        console.log(this.endType);\n    }\n\n    setLineColour(lineColour) {\n        switch(lineColour) {\n            case \"Black\":\n                this.lineColour = LineColour.BLACK;\n                break;\n            case \"Red\":\n                this.lineColour = LineColour.RED;\n                break;\n            case \"Blue\":\n                this.lineColour = LineColour.BLUE;\n                break;\n            case \"Green\":\n                this.lineColour = LineColour.GREEN;\n                break;\n            default:\n                break;\n        }\n    }\n\n    setLineType(lineType) {\n        switch(lineType) {\n            case \"Solid\":\n                this.lineType = LineType.SOLID;\n                break;\n            case \"Dashed\":\n                this.lineType = LineType.DASHED;\n                break;\n            default:\n                break;\n        }\n    }\n\n    draw(canvasContext) {\n        var fromNode = this.fromVertex.getNodeByVertexNode(this.fromVertexNode);\n        var toNode = this.toVertex.getNodeByVertexNode(this.toVertexNode);\n\n        canvasContext.beginPath();\n        canvasContext.moveTo(fromNode[0], fromNode[1]);\n        canvasContext.lineTo(toNode[0], toNode[1]);\n        canvasContext.stroke();\n\n        // Arrow types\n        if (this.endType === EdgeEnd.ARROW) {\n            // TODO arrow types\n        }\n    }\n\n    // Returns all nodes for this object\n    getNodes() {\n        return null;\n    }\n\n    // Checks if it intersects with point\n    intersects(x, y) {\n        var fromNode = this.fromVertex.getNodeByVertexNode(this.fromVertexNode);\n        var toNode = this.toVertex.getNodeByVertexNode(this.toVertexNode);\n\n        var m = getDistance(x, y, fromNode[0], fromNode[1]);\n        var n = getDistance(x, y, toNode[0], toNode[1]);\n        var l = getDistance(fromNode[0], fromNode[1], toNode[0], toNode[1]);\n\n        var threshold = 5;\n\n        return (m+n-threshold < l);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}